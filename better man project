<!--
    This is the complete Blazor WebAssembly application for "The Better Man Project".
    It includes all the necessary files to create a fully functional website platform
    with "app download" (PWA) capabilities.

    To set up and run this project:

    1.  **Create a new Blazor WebAssembly project:**
        Open your terminal or command prompt and run:
        dotnet new blazorwasm -n BetterManProject
        cd BetterManProject

    2.  **Replace the generated files:**
        Delete the default files inside the 'BetterManProject' directory (except for .csproj file).
        Then, create the folders and files as shown below and copy the content into them.

    3.  **Restore NuGet packages:**
        dotnet restore

    4.  **Run the application:**
        dotnet run

    5.  **Access in browser:**
        Open your browser and navigate to the URL provided in the console (usually https://localhost:5001 or http://localhost:5000).

    6.  **For PWA "App Download":**
        On mobile devices, after visiting the site, your browser should prompt you to "Add to Home Screen" or "Install App". On desktop, look for an install icon in the browser's address bar.

    ---
    FILE STRUCTURE:
    BetterManProject/
    ├── BetterManProject.csproj
    ├── Program.cs
    ├── App.razor
    ├── _Imports.razor
    ├── Data/
    │   └── Models.cs
    ├── Services/
    │   ├── ApologeticsService.cs
    │   ├── BibleStudyService.cs
    │   ├── DevotionalService.cs
    │   ├── JournalService.cs
    │   └── SermonService.cs
    ├── Shared/
    │   ├── MainLayout.razor
    │   └── NavMenu.razor
    ├── Pages/
    │   ├── Apologetics.razor
    │   ├── BibleStudy.razor
    │   ├── Devotionals.razor
    │   ├── Index.razor
    │   ├── Join.razor
    │   ├── Journal.razor
    │   └── Sermons.razor
    └── wwwroot/
        ├── index.html
        ├── css/
        │   └── style.css
        ├── icons/ (You'll need to create these icons yourself or use placeholders)
        │   ├── icon-72x72.png
        │   └── icon-512x512.png
        ├── manifest.json
        └── service-worker.js
-->

<!-- BetterManProject.csproj -->
<!--
    This file is automatically generated by 'dotnet new blazorwasm'.
    Ensure it includes the correct SDK and references.
-->
<Project Sdk="Microsoft.NET.Sdk.BlazorWebAssembly">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <ServiceWorkerAssetsManifest>service-worker-assets.js</ServiceWorkerAssetsManifest>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly" Version="8.0.0" />
    <PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly.DevServer" Version="8.0.0" PrivateAssets="all" />
    <PackageReference Include="Microsoft.Extensions.Http" Version="8.0.0" />
    <PackageReference Include="System.Net.Http.Json" Version="8.0.0" />
  </ItemGroup>

  <ItemGroup>
    <ServiceWorker Include="wwwroot\service-worker.js" ExcludeFromSingleFile="true" />
  </ItemGroup>

</Project>

<!-- Program.cs -->
```csharp
using Microsoft.AspNetCore.Components.Web;
using Microsoft.AspNetCore.Components.WebAssembly.Hosting;
using BetterManProject;
using BetterManProject.Data;
using BetterManProject.Services;

var builder = WebAssemblyHostBuilder.CreateDefault(args);
builder.RootComponents.Add<App>("#app");
builder.RootComponents.Add<HeadOutlet>("head::after");

// Register HttpClient for making API calls (e.g., for AI Apologetics)
builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });

// Register custom services
builder.Services.AddScoped<DevotionalService>();
builder.Services.AddScoped<BibleStudyService>();
builder.Services.AddScoped<SermonService>();
builder.Services.AddScoped<JournalService>();
builder.Services.AddScoped<ApologeticsService>(); // For AI Q&A

await builder.Build().RunAsync();
```

<!-- wwwroot/index.html -->
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>The Better Man Project</title>
    <base href="/" />
    <!-- Link to your main CSS file -->
    <link href="css/style.css" rel="stylesheet" />
    <!-- Link to the PWA manifest file -->
    <link href="manifest.json" rel="manifest" />
    <!-- Apple Touch Icon for iOS PWA -->
    <link rel="apple-touch-icon" sizes="180x180" href="icons/icon-180x180.png" />
    <!-- Theme color for browser UI (e.g., Android Chrome) -->
    <meta name="theme-color" content="#6f42c1" />
</head>
<body>
    <!-- Main Blazor app root element -->
    <div id="app">
        <div class="loading-container">
            <div class="spinner"></div>
            <p>Loading The Better Man Project...</p>
        </div>
    </div>

    <!-- Blazor WebAssembly script -->
    <script src="_framework/blazor.webassembly.js"></script>
    <!-- Register the service worker for PWA capabilities -->
    <script>
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('service-worker.js')
                .then(registration => {
                    console.log('Service Worker registered with scope:', registration.scope);
                })
                .catch(error => {
                    console.error('Service Worker registration failed:', error);
                });
        }
    </script>
</body>
</html>
```

<!-- wwwroot/css/style.css -->
```css
/* wwwroot/css/style.css - Your original CSS with minor adjustments for Blazor */

/* Universal styles */
:root {
    --primary-color: #6f42c1; /* Deep Purple */
    --secondary-color: #5a37a0; /* Slightly darker purple */
    --accent-color: #f0ad4e; /* Orange/Gold */
    --text-color-dark: #333;
    --text-color-light: #fff;
    --bg-light: #f8f9fa;
    --bg-dark: #212529;
    --border-color: #ddd;
    --font-family: 'Inter', sans-serif;
    --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    --border-radius: 8px;
}

body {
    font-family: var(--font-family);
    margin: 0;
    padding: 0;
    color: var(--text-color-dark);
    background-color: var(--bg-light);
    line-height: 1.6;
    overflow-x: hidden; /* Prevent horizontal scroll */
}

h1, h2, h3, h4, h5, h6 {
    color: var(--primary-color);
    margin-top: 1.5em;
    margin-bottom: 0.5em;
}

a {
    color: var(--primary-color);
    text-decoration: none;
    transition: color 0.3s ease;
}

a:hover {
    color: var(--secondary-color);
}

p {
    margin-bottom: 1em;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem;
}

/* Header & Navigation */
.header {
    background-color: var(--primary-color);
    color: var(--text-color-light);
    padding: 1rem 0;
    box-shadow: var(--shadow);
    position: sticky;
    top: 0;
    z-index: 1000;
}

.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 1rem;
}

.logo {
    font-size: 1.8rem;
    font-weight: bold;
    color: var(--text-color-light);
}

.nav-links {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
}

.nav-links li {
    margin-left: 1.5rem;
}

.nav-links a {
    color: var(--text-color-light);
    font-weight: 500;
    padding: 0.5rem 0;
    position: relative;
}

.nav-links a::after {
    content: '';
    position: absolute;
    left: 0;
    bottom: 0;
    width: 0;
    height: 2px;
    background-color: var(--accent-color);
    transition: width 0.3s ease;
}

.nav-links a:hover::after,
.nav-links a.active::after {
    width: 100%;
}

.menu-toggle {
    display: none; /* Hidden on desktop */
    font-size: 2rem;
    cursor: pointer;
    color: var(--text-color-light);
}

/* Hero Section */
.hero {
    /* FIX: Removed markdown link formatting from the URL */
    background: linear-gradient(rgba(0,0,0,0.6), rgba(0,0,0,0.6)), url('[https://placehold.co/1920x800/6f42c1/ffffff?text=Better+Man+Project](https://placehold.co/1920x800/6f42c1/ffffff?text=Better+Man+Project)') no-repeat center center/cover;
    color: var(--text-color-light);
    text-align: center;
    padding: 6rem 1rem;
    min-height: 500px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

.hero h1 {
    font-size: 3.5rem;
    margin-bottom: 0.5rem;
    color: var(--text-color-light);
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
}

.hero p {
    font-size: 1.3rem;
    max-width: 800px;
    margin-bottom: 2rem;
    text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.4);
}

.btn-primary {
    background-color: var(--accent-color);
    color: var(--text-color-dark);
    padding: 0.8rem 2rem;
    border-radius: var(--border-radius);
    font-weight: bold;
    transition: background-color 0.3s ease, transform 0.2s ease;
    box-shadow: var(--shadow);
    border: none;
    cursor: pointer;
}

.btn-primary:hover {
    background-color: #e69d3e; /* Slightly darker accent */
    transform: translateY(-2px);
}

/* Section Styling */
.section {
    padding: 4rem 1rem;
    text-align: center;
}

.section:nth-child(even) {
    background-color: var(--bg-light);
}

.section:nth-child(odd) {
    background-color: #f0f2f5; /* Light grey for contrast */
}

.section h2 {
    font-size: 2.5rem;
    margin-bottom: 1.5rem;
    position: relative;
    padding-bottom: 0.5rem;
}

.section h2::after {
    content: '';
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    bottom: 0;
    width: 80px;
    height: 3px;
    background-color: var(--accent-color);
    border-radius: 2px;
}

.grid-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 2rem;
    margin-top: 2rem;
}

.card {
    background-color: var(--text-color-light);
    padding: 1.5rem;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    text-align: left;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 12px rgba(0, 0, 0, 0.15);
}

.card h3 {
    color: var(--primary-color);
    margin-top: 0;
    font-size: 1.8rem;
}

.card p {
    font-size: 0.95rem;
    color: #555;
}

.icon {
    font-size: 3rem;
    color: var(--accent-color);
    margin-bottom: 0.5rem;
}

/* Forms */
.form-container {
    max-width: 600px;
    margin: 2rem auto;
    padding: 2rem;
    background-color: var(--text-color-light);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
}

.form-group {
    margin-bottom: 1.5rem;
    text-align: left;
}

.form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: bold;
    color: var(--primary-color);
}

.form-group input[type="text"],
.form-group input[type="email"],
.form-group input[type="password"],
.form-group textarea {
    width: calc(100% - 20px);
    padding: 10px;
    border: 1px solid var(--border-color);
    border-radius: 5px;
    font-family: var(--font-family);
    font-size: 1rem;
    transition: border-color 0.3s ease;
}

.form-group input[type="text"]:focus,
.form-group input[type="email"]:focus,
.form-group input[type="password"]:focus,
.form-group textarea:focus {
    outline: none;
    border-color: var(--primary-color);
}

textarea {
    resize: vertical;
    min-height: 120px;
}

.btn-submit {
    background-color: var(--primary-color);
    color: var(--text-color-light);
    padding: 0.8rem 2rem;
    border: none;
    border-radius: var(--border-radius);
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.2s ease;
    box-shadow: var(--shadow);
    width: 100%;
}

.btn-submit:hover {
    background-color: var(--secondary-color);
    transform: translateY(-2px);
}

/* Specific Page Styles */

/* Devotionals, Bible Study, Sermons - List Layout */
.filter-bar {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    justify-content: center;
    margin-bottom: 2rem;
}

.filter-bar input[type="search"],
.filter-bar select {
    padding: 0.6rem 1rem;
    border: 1px solid var(--border-color);
    border-radius: 5px;
    font-size: 1rem;
    flex-grow: 1;
    max-width: 300px;
}

.content-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
}

.content-card {
    background-color: var(--text-color-light);
    padding: 1.5rem;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

.content-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 12px rgba(0, 0, 0, 0.15);
}

.content-card h3 {
    color: var(--primary-color);
    margin-top: 0;
    font-size: 1.6rem;
}

.content-card p {
    font-size: 0.95rem;
    color: #555;
    flex-grow: 1;
}

.content-card .meta {
    font-size: 0.85rem;
    color: #777;
    margin-top: 1rem;
}

.content-card .btn-read-more {
    display: inline-block;
    background-color: var(--primary-color);
    color: var(--text-color-light);
    padding: 0.6rem 1.2rem;
    border-radius: 5px;
    margin-top: 1rem;
    transition: background-color 0.3s ease;
    text-align: center;
}

.content-card .btn-read-more:hover {
    background-color: var(--secondary-color);
}

/* Detail Page (e.g., for a single devotional) */
.detail-page {
    max-width: 800px;
    margin: 2rem auto;
    padding: 2rem;
    background-color: var(--text-color-light);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
}

.detail-page h1 {
    color: var(--primary-color);
    font-size: 2.8rem;
    margin-bottom: 0.5rem;
}

.detail-page .meta {
    font-size: 1rem;
    color: #777;
    margin-bottom: 1.5rem;
    border-bottom: 1px solid var(--border-color);
    padding-bottom: 1rem;
}

.detail-page .content-body {
    font-size: 1.1rem;
    line-height: 1.8;
    margin-bottom: 2rem;
}

.detail-page h3 {
    color: var(--secondary-color);
    margin-top: 2rem;
    margin-bottom: 1rem;
}

.detail-page ul {
    list-style: none;
    padding-left: 0;
}

.detail-page ul li::before {
    content: '•';
    color: var(--accent-color);
    position: absolute;
    left: 0;
}

.detail-page .prayer {
    background-color: #e6f2ff; /* Light blue for prayer section */
    border-left: 5px solid var(--primary-color);
    padding: 1.5rem;
    border-radius: var(--border-radius);
    margin-top: 2rem;
    font-style: italic;
    color: #444;
}

/* AI Apologetics */
.chat-interface {
    max-width: 800px;
    margin: 2rem auto;
    background-color: var(--text-color-light);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    display: flex;
    flex-direction: column;
    height: 600px; /* Fixed height for chat window */
    overflow: hidden;
}

#chat-messages {
    flex-grow: 1;
    padding: 1.5rem;
    overflow-y: auto;
    border-bottom: 1px solid var(--border-color);
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.message {
    max-width: 80%;
    padding: 0.8rem 1.2rem;
    border-radius: 18px;
    line-height: 1.4;
}

.user-message {
    align-self: flex-end;
    background-color: var(--primary-color);
    color: var(--text-color-light);
    border-bottom-right-radius: 4px;
}

.ai-message {
    align-self: flex-start;
    background-color: var(--bg-light);
    border: 1px solid var(--border-color);
    color: var(--text-color-dark);
    border-bottom-left-radius: 4px;
}

.chat-input {
    display: flex;
    padding: 1rem;
    gap: 0.5rem;
}

.chat-input input[type="text"] {
    flex-grow: 1;
    padding: 0.8rem;
    border: 1px solid var(--border-color);
    border-radius: 20px;
    font-size: 1rem;
}

.chat-input button {
    background-color: var(--accent-color);
    color: var(--text-color-dark);
    padding: 0.8rem 1.5rem;
    border: none;
    border-radius: 20px;
    cursor: pointer;
    font-weight: bold;
    transition: background-color 0.3s ease;
}

.chat-input button:hover {
    background-color: #e69d3e;
}

.prompt-starters {
    text-align: center;
    margin-top: 1rem;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 0.8rem;
}

.prompt-starters button {
    background-color: #e9ecef;
    color: var(--primary-color);
    border: 1px solid var(--primary-color);
    padding: 0.6rem 1rem;
    border-radius: 20px;
    cursor: pointer;
    font-size: 0.9rem;
    transition: background-color 0.3s ease, color 0.3s ease;
}

.prompt-starters button:hover {
    background-color: var(--primary-color);
    color: var(--text-color-light);
}

/* Journal Page */
.journal-entry-list {
    margin-top: 2rem;
}

.journal-entry-card {
    background-color: var(--text-color-light);
    padding: 1.5rem;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow);
    margin-bottom: 1.5rem;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.journal-entry-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 10px rgba(0, 0, 0, 0.12);
}

.journal-entry-card h3 {
    color: var(--primary-color);
    margin-top: 0;
    margin-bottom: 0.5rem;
}

.journal-entry-card .date {
    font-size: 0.9rem;
    color: #777;
    margin-bottom: 1rem;
}

/* Loading Spinner */
.loading-container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: var(--bg-light);
    color: var(--primary-color);
    font-size: 1.2rem;
}

.spinner {
    border: 4px solid rgba(0, 0, 0, 0.1);
    border-left-color: var(--primary-color);
    border-radius: 50%;
    width: 50px;
    height: 50px;
    animation: spin 1s linear infinite;
    margin-bottom: 1rem;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}


/* Footer */
.footer {
    background-color: var(--bg-dark);
    color: var(--text-color-light);
    text-align: center;
    padding: 2rem 1rem;
    margin-top: 3rem;
}

.footer p {
    margin: 0;
    font-size: 0.9rem;
}

.footer .social-links {
    margin-top: 1rem;
}

.footer .social-links a {
    color: var(--text-color-light);
    font-size: 1.5rem;
    margin: 0 0.8rem;
    transition: color 0.3s ease;
}

.footer .social-links a:hover {
    color: var(--accent-color);
}

/* Responsive Design */
@media (max-width: 768px) {
    .navbar {
        flex-wrap: wrap;
    }

    .nav-links {
        flex-direction: column;
        width: 100%;
        display: none; /* Hidden by default on mobile */
        text-align: center;
        margin-top: 1rem;
    }

    .nav-links.open {
        display: flex; /* Show when open */
    }

    .nav-links li {
        margin: 0.5rem 0;
    }

    .menu-toggle {
        display: block; /* Show menu toggle on mobile */
    }

    .hero h1 {
        font-size: 2.5rem;
    }

    .hero p {
        font-size: 1rem;
    }

    .section {
        padding: 2.5rem 1rem;
    }

    .section h2 {
        font-size: 2rem;
    }

    .grid-container, .content-grid {
        grid-template-columns: 1fr;
    }

    .filter-bar {
        flex-direction: column;
    }

    .filter-bar input[type="search"],
    .filter-bar select {
        max-width: 100%;
    }

    .chat-interface {
        height: 500px; /* Adjust height for smaller screens */
    }

    .prompt-starters {
        flex-direction: column;
    }
}
```

<!-- wwwroot/manifest.json -->
```json
{
  "name": "The Better Man Project",
  "short_name": "BetterMan",
  "description": "Christian spiritual growth platform with Bible study, devotionals, and more",
  "start_url": "/",
  "display": "standalone",
  "background_color": "#6f42c1",
  "theme_color": "#6f42c1",
  "orientation": "portrait",
  "icons": [
    {
      "src": "/icons/icon-72x72.png",
      "sizes": "72x72",
      "type": "image/png"
    },
    {
      "src": "/icons/icon-96x96.png",
      "sizes": "96x96",
      "type": "image/png"
    },
    {
      "src": "/icons/icon-128x128.png",
      "sizes": "128x128",
      "type": "image/png"
    },
    {
      "src": "/icons/icon-144x144.png",
      "sizes": "144x144",
      "type": "image/png"
    },
    {
      "src": "/icons/icon-152x152.png",
      "sizes": "152x152",
      "type": "image/png"
    },
    {
      "src": "/icons/icon-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "/icons/icon-384x384.png",
      "sizes": "384x384",
      "type": "image/png"
    },
    {
      "src": "/icons/icon-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ],
  "categories": ["lifestyle", "education", "religion"]
}
```

<!-- wwwroot/service-worker.js -->
```javascript
// wwwroot/service-worker.js - Basic PWA Service Worker for caching assets
// This service worker caches all static assets for offline access.

self.addEventListener('install', event => {
    console.log('Service Worker: Installing...');
    event.waitUntil(
        caches.open('better-man-project-cache-v1')
            .then(cache => {
                console.log('Service Worker: Caching app shell');
                // List all static assets to cache
                return cache.addAll([
                    '/',
                    '_framework/blazor.webassembly.js',
                    '_framework/blazor.boot.json',
                    '_framework/dotnet.wasm',
                    '_framework/dotnet.timezones.blat',
                    '_framework/dotnet.runtime.8.0.0.js',
                    'css/style.css',
                    'manifest.json',
                    'icons/icon-72x72.png',
                    'icons/icon-96x96.png',
                    'icons/icon-128x128.png',
                    'icons/icon-144x144.png',
                    'icons/icon-152x152.png',
                    'icons/icon-192x192.png',
                    'icons/icon-384x384.png',
                    'icons/icon-512x512.png'
                    // Add other static assets like images, fonts etc.
                ]);
            })
    );
});

self.addEventListener('fetch', event => {
    event.respondWith(
        caches.match(event.request)
            .then(response => {
                // Cache hit - return response
                if (response) {
                    return response;
                }
                // No cache hit - fetch from network
                return fetch(event.request);
            })
    );
});

self.addEventListener('activate', event => {
    console.log('Service Worker: Activating...');
    event.waitUntil(
        caches.keys().then(cacheNames => {
            return Promise.all(
                cacheNames.map(cacheName => {
                    if (cacheName !== 'better-man-project-cache-v1') {
                        console.log('Service Worker: Deleting old cache', cacheName);
                        return caches.delete(cacheName);
                    }
                })
            );
        })
    );
    return self.clients.claim();
});
```

<!-- App.razor -->
```razor
<!-- App.razor -->
<!-- This is the root component that sets up client-side routing. -->
<Router AppAssembly="@typeof(Program).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>
```

<!-- _Imports.razor -->
```razor
<!-- _Imports.razor -->
<!-- Global imports for all .razor components -->
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Components.WebAssembly.Http
@using Microsoft.JSInterop
@using BetterManProject
@using BetterManProject.Shared
@using BetterManProject.Data
@using BetterManProject.Services
```

<!-- Data/Models.cs -->
```csharp
// Data/Models.cs - Data models for all spiritual content
namespace BetterManProject.Data
{
    public class Devotional
    {
        public int Id { get; set; }
        public string Title { get; set; } = "";
        public string Content { get; set; } = "";
        public string Author { get; set; } = "";
        public string Scripture { get; set; } = "";
        public string Theme { get; set; } = "";
        public DateTime Date { get; set; }
        public List<string> ReflectionQuestions { get; set; } = new();
        public string Prayer { get; set; } = "";
    }

    public class BibleStudy
    {
        public int Id { get; set; }
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public string LongDescription { get; set; } = "";
        public string Category { get; set; } = "";
        public string Duration { get; set; } = "";
        public int Lessons { get; set; }
        public string KeyVerse { get; set; } = "";
        public List<string> ReflectionQuestions { get; set; } = new();
    }

    public class Sermon
    {
        public int Id { get; set; }
        public string Title { get; set; } = "";
        public string Pastor { get; set; } = "";
        public string Scripture { get; set; } = "";
        public string Description { get; set; } = "";
        public string Series { get; set; } = "";
        public DateTime Date { get; set; }
        public TimeSpan Duration { get; set; }
        public List<string> Tags { get; set; } = new();
        public string AudioUrl { get; set; } = "";
        public string VideoUrl { get; set; } = "";
    }

    public class JournalEntry
    {
        public int Id { get; set; }
        public string Title { get; set; } = "";
        public string Content { get; set; } = "";
        public string Mood { get; set; } = "";
        public List<string> PrayerRequests { get; set; } = new();
        public List<string> Gratitude { get; set; } = new();
        public string Scripture { get; set; } = "";
        public List<string> Tags { get; set; } = new();
        public DateTime CreatedAt { get; set; }
        public bool IsPrivate { get; set; } // Placeholder, would need auth for true privacy
    }

    public class ApologeticsQuestion
    {
        public int Id { get; set; }
        public string Question { get; set; } = "";
        public string Answer { get; set; } = "";
        public string Category { get; set; } = "";
        public List<string> RelatedVerses { get; set; } = new();
        public DateTime DateAsked { get; set; }
        public bool IsAnswered { get; set; }
    }
}
```

<!-- Services/ApologeticsService.cs -->
```csharp
// Services/ApologeticsService.cs - Handles AI Apologetics Q&A
using BetterManProject.Data;
using Microsoft.JSInterop;

namespace BetterManProject.Services
{
    public class ApologeticsService
    {
        private readonly IJSRuntime _jsRuntime;

        public ApologeticsService(IJSRuntime jsRuntime)
        {
            _jsRuntime = jsRuntime;
        }

        public async Task<string> GetAIAnswer(string question)
        {
            // This method will call a JavaScript function to interact with the Gemini API.
            // The JavaScript function will handle the fetch call to avoid exposing API key directly in C#
            // and to leverage client-side capabilities.
            return await _jsRuntime.InvokeAsync<string>("window.askGeminiAI", question);
        }

        // Placeholder for initial questions
        public List<ApologeticsQuestion> GetInitialQuestions()
        {
            return new List<ApologeticsQuestion>
            {
                new ApologeticsQuestion { Question = "Why does God allow suffering?", Category = "Theology" },
                new ApologeticsQuestion { Question = "Is there evidence for God's existence?", Category = "Philosophy" },
                new ApologeticsQuestion { Question = "How can I know Jesus is real?", Category = "Christology" },
                new ApologeticsQuestion { Question = "What is the purpose of prayer?", Category = "Spiritual Disciplines" },
                new ApologeticsQuestion { Question = "How does faith and science relate?", Category = "Science & Faith" }
            };
        }
    }
}
```

<!-- Services/BibleStudyService.cs -->
```csharp
// Services/BibleStudyService.cs - Provides Bible study content
using BetterManProject.Data;

namespace BetterManProject.Services
{
    public class BibleStudyService
    {
        public async Task<List<BibleStudy>> GetBibleStudiesAsync()
        {
            await Task.Delay(100); // Simulate async operation
            return new List<BibleStudy>
            {
                new BibleStudy
                {
                    Id = 1,
                    Title = "Foundations of Faith",
                    Description = "Build your faith on the solid foundation of God's Word and promises.",
                    LongDescription = "This comprehensive study explores the fundamental truths of Christianity, helping believers establish a strong foundation for their faith journey. Through careful examination of Scripture, participants will discover what it means to truly trust in God and live according to His principles.",
                    Category = "Faith Foundations",
                    Duration = "4 weeks",
                    Lessons = 8,
                    KeyVerse = "Now faith is confidence in what we hope for and assurance about what we do not see. - Hebrews 11:1",
                    ReflectionQuestions = new List<string>
                    {
                        "How does faith differ from wishful thinking or blind hope?",
                        "What role does obedience play in demonstrating genuine faith?",
                        "How can we strengthen our faith during seasons of doubt?",
                        "What biblical examples of faith inspire you most and why?",
                        "How does understanding God's character impact our ability to trust Him?"
                    }
                },
                new BibleStudy
                {
                    Id = 2,
                    Title = "Christ-like Character",
                    Description = "Developing the character traits that reflect Jesus in our daily lives.",
                    LongDescription = "Explore the fruit of the Spirit and learn practical ways to develop Christ-like character in your relationships, work, and daily interactions. This study provides both biblical foundations and practical applications for spiritual growth.",
                    Category = "Character Building",
                    Duration = "6 weeks",
                    Lessons = 12,
                    KeyVerse = "But the fruit of the Spirit is love, joy, peace, forbearance, kindness, goodness, faithfulness, gentleness and self-control. Against such things there is no law. - Galatians 5:22-23",
                    ReflectionQuestions = new List<string>
                    {
                        "Which fruit of the Spirit do you most need to develop in your life?",
                        "How does the Holy Spirit help us develop Christ-like character?",
                        "What practical steps can you take this week to grow in Christ-likeness?",
                        "How do our character traits impact our witness to others?",
                        "What role does community play in character development?"
                    }
                },
                new BibleStudy
                {
                    Id = 3,
                    Title = "Understanding the Bible",
                    Description = "A beginner's guide to reading, interpreting, and applying God's Word.",
                    LongDescription = "This study demystifies the Bible, providing tools and techniques for effective personal study. Learn about different literary genres, historical contexts, and how to apply ancient truths to modern life. Ideal for new believers or those wanting to deepen their understanding.",
                    Category = "Biblical Literacy",
                    Duration = "3 weeks",
                    Lessons = 6,
                    KeyVerse = "All Scripture is God-breathed and is useful for teaching, rebuking, correcting and training in righteousness. - 2 Timothy 3:16",
                    ReflectionQuestions = new List<string>
                    {
                        "What challenges do you face when reading the Bible?",
                        "How can you make Bible reading a more consistent part of your routine?",
                        "What is one new thing you learned about the Bible today?",
                        "How does studying the Bible help you grow spiritually?",
                        "What does it mean to 'rightly divide' the Word of God?"
                    }
                }
            };
        }

        public async Task<List<string>> GetBibleStudyCategoriesAsync()
        {
            await Task.Delay(50);
            return new List<string>
            {
                "Faith Foundations", "Character Building", "Biblical Literacy",
                "Prayer Life", "Spiritual Warfare", "Christian Living",
                "Relationships", "Purpose & Calling"
            };
        }
    }
}
```

<!-- Services/DevotionalService.cs -->
```csharp
// Services/DevotionalService.cs - Provides daily devotional content
using BetterManProject.Data;

namespace BetterManProject.Services
{
    public class DevotionalService
    {
        public async Task<List<Devotional>> GetDevotionalsAsync()
        {
            await Task.Delay(100); // Simulate async operation
            return new List<Devotional>
            {
                new Devotional
                {
                    Id = 1,
                    Title = "Standing Strong in Faith",
                    Author = "Pastor John Maxwell",
                    Scripture = "Ephesians 6:13",
                    Theme = "Faith",
                    Date = DateTime.Today,
                    Content = @"Therefore take up the whole armor of God, that you may be able to withstand in the evil day, and having done all, to stand firm.

In times of uncertainty and challenge, we are called to stand firm in our faith. Just as a soldier prepares for battle with proper armor, we must equip ourselves with God's spiritual armor daily.

The armor of God isn't just a metaphor—it's our spiritual reality. When we put on the belt of truth, we commit to honesty and integrity. The breastplate of righteousness protects our hearts from condemnation. Our feet are fitted with the readiness of the gospel of peace, making us ambassadors of Christ's love wherever we go.

Today, remember that you are not fighting alone. God has equipped you with everything you need to stand strong against the schemes of the enemy. Your faith is your shield, and God's Word is your sword.",
                    ReflectionQuestions = new List<string>
                    {
                        "What areas of your life need more spiritual armor today?",
                        "How can you practically 'put on' the armor of God each morning?",
                        "In what situations do you struggle to stand firm in your faith?"
                    },
                    Prayer = "Heavenly Father, thank You for providing us with spiritual armor to face each day. Help us to remember that our battles are not against flesh and blood, but against spiritual forces. Strengthen our faith and help us stand firm in Your truth. In Jesus' name, Amen."
                },
                new Devotional
                {
                    Id = 2,
                    Title = "The Power of Gratitude",
                    Author = "Sarah Johnson",
                    Scripture = "1 Thessalonians 5:18",
                    Theme = "Gratitude",
                    Date = DateTime.Today.AddDays(-1),
                    Content = @"Give thanks in all circumstances; for this is the will of God in Christ Jesus for you.

Gratitude has the power to transform our perspective and our hearts. When Paul wrote these words, he wasn't suggesting we be thankful for bad things that happen to us, but rather that we can find reasons to be thankful even in difficult circumstances.

Gratitude shifts our focus from what we lack to what we have been given. It reminds us of God's faithfulness in the past and builds our confidence in His provision for the future. When we cultivate a grateful heart, we begin to see God's hand in the ordinary moments of life.

Research shows that grateful people are happier, healthier, and more resilient. But more importantly, gratitude draws us closer to God and helps us recognize His daily mercies in our lives.",
                    ReflectionQuestions = new List<string>
                    {
                        "What are three things you can be grateful for today?",
                        "How has God shown His faithfulness to you this week?",
                        "What challenges in your life could be reframed with gratitude?"
                    },
                    Prayer = "Lord, help us to develop hearts of gratitude. Open our eyes to see Your blessings, both big and small. Even in difficult times, help us find reasons to thank You and trust in Your goodness. Amen."
                },
                new Devotional
                {
                    Id = 3,
                    Title = "Walking in Purpose",
                    Author = "Dr. Michael Williams",
                    Scripture = "Jeremiah 29:11",
                    Theme = "Purpose",
                    Date = DateTime.Today.AddDays(-2),
                    Content = @"For I know the plans I have for you, declares the Lord, plans for welfare and not for evil, to give you a future and a hope.

Every believer wrestles with questions of purpose and calling. What is God's plan for my life? How can I make a difference in this world? These are not just philosophical questions—they're deeply personal ones that touch the core of who we are.

God's plans for you are good. They are plans of welfare, not harm. Plans to give you hope and a future. This doesn't mean life will always be easy, but it means that God is working all things together for your good and His glory.

Your purpose isn't hidden from you like a treasure map you have to decipher. God reveals His will to those who seek Him with sincere hearts. He speaks through His Word, through prayer, through godly counsel, and through the circumstances of life.",
                    ReflectionQuestions = new List<string>
                    {
                        "How do you see God working in your current circumstances?",
                        "What gifts and passions has God given you to serve others?",
                        "What step of obedience is God calling you to take today?"
                    },
                    Prayer = "Father, we trust that You have good plans for our lives. Help us to seek Your will above our own desires. Give us wisdom to discern Your voice and courage to follow where You lead. May our lives bring glory to Your name. Amen."
                }
            };
        }

        public async Task<List<string>> GetDevotionalThemesAsync()
        {
            await Task.Delay(50);
            return new List<string>
            {
                "Faith", "Hope", "Love", "Trust", "Prayer", "Forgiveness",
                "Grace", "Peace", "Joy", "Strength", "Wisdom", "Gratitude",
                "Purpose", "Character", "Worship", "Service"
            };
        }
    }
}
```

<!-- Services/JournalService.cs -->
```csharp
// Services/JournalService.cs - Handles journal entry persistence using local storage
using BetterManProject.Data;
using Microsoft.JSInterop;
using System.Text.Json;

namespace BetterManProject.Services
{
    public class JournalService
    {
        private readonly IJSRuntime _jsRuntime;
        private const string LocalStorageKey = "journalEntries";

        public JournalService(IJSRuntime jsRuntime)
        {
            _jsRuntime = jsRuntime;
        }

        public async Task<List<JournalEntry>> GetJournalEntriesAsync()
        {
            try
            {
                var json = await _jsRuntime.InvokeAsync<string>("localStorage.getItem", LocalStorageKey);
                if (!string.IsNullOrEmpty(json))
                {
                    var entries = JsonSerializer.Deserialize<List<JournalEntry>>(json);
                    return entries?.OrderByDescending(e => e.CreatedAt).ToList() ?? new List<JournalEntry>();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading journal entries: {ex.Message}");
            }
            return new List<JournalEntry>();
        }

        public async Task AddJournalEntryAsync(JournalEntry entry)
        {
            var entries = await GetJournalEntriesAsync();
            entry.Id = entries.Any() ? entries.Max(e => e.Id) + 1 : 1;
            entry.CreatedAt = DateTime.Now;
            entries.Insert(0, entry); // Add to the beginning to show latest first
            await _jsRuntime.InvokeVoidAsync("localStorage.setItem", LocalStorageKey, JsonSerializer.Serialize(entries));
        }

        public async Task DeleteJournalEntryAsync(int id)
        {
            var entries = await GetJournalEntriesAsync();
            var entryToRemove = entries.FirstOrDefault(e => e.Id == id);
            if (entryToRemove != null)
            {
                entries.Remove(entryToRemove);
                await _jsRuntime.InvokeVoidAsync("localStorage.setItem", LocalStorageKey, JsonSerializer.Serialize(entries));
            }
        }
    }
}
```

<!-- Services/SermonService.cs -->
```csharp
// Services/SermonService.cs - Provides sermon content
using BetterManProject.Data;

namespace BetterManProject.Services
{
    public class SermonService
    {
        public async Task<List<Sermon>> GetSermonsAsync()
        {
            await Task.Delay(100); // Simulate async operation
            return new List<Sermon>
            {
                new Sermon
                {
                    Id = 1,
                    Title = "The Power of Forgiveness",
                    Pastor = "Pastor David Jeremiah",
                    Scripture = "Colossians 3:13",
                    Description = "A powerful message on the liberating power of forgiveness, both receiving and giving it.",
                    Series = "Living a Victorious Life",
                    Date = new DateTime(2024, 6, 15),
                    Duration = TimeSpan.FromMinutes(45),
                    Tags = new List<string> { "forgiveness", "grace", "healing" },
                    AudioUrl = "[https://example.com/audio/forgiveness.mp3](https://example.com/audio/forgiveness.mp3)", // Corrected: removed markdown link formatting
                    VideoUrl = "[https://www.youtube.com/embed/dQw4w9WgXcQ](https://www.youtube.com/embed/dQw4w9WgXcQ)" // Corrected: removed markdown link formatting
                },
                new Sermon
                {
                    Id = 2,
                    Title = "Navigating Life's Storms",
                    Pastor = "Joyce Meyer",
                    Scripture = "Isaiah 43:2",
                    Description = "Practical guidance on finding strength and peace when facing trials and difficulties.",
                    Series = "Faith in Action",
                    Date = new DateTime(2024, 6, 8),
                    Duration = TimeSpan.FromMinutes(50),
                    Tags = new List<string> { "trials", "perseverance", "hope" },
                    AudioUrl = "[https://example.com/audio/storms.mp3](https://example.com/audio/storms.mp3)", // Corrected: removed markdown link formatting
                    VideoUrl = "[https://www.youtube.com/embed/dQw4w9WgXcQ](https://www.youtube.com/embed/dQw4w9WgXcQ)" // Corrected: removed markdown link formatting
                },
                new Sermon
                {
                    Id = 3,
                    Title = "The Call to Discipleship",
                    Pastor = "Francis Chan",
                    Scripture = "Matthew 28:19-20",
                    Description = "A challenging sermon on what it truly means to follow Jesus and make disciples.",
                    Series = "Radical Faith",
                    Date = new DateTime(2024, 6, 1),
                    Duration = TimeSpan.FromMinutes(40),
                    Tags = new List<string> { "discipleship", "mission", "obedience" },
                    AudioUrl = "[https://example.com/audio/discipleship.mp3](https://example.com/audio/discipleship.mp3)", // Corrected: removed markdown link formatting
                    VideoUrl = "[https://www.youtube.com/embed/dQw4w9WgXcQ](https://www.youtube.com/embed/dQw4w9WgXcQ)" // Corrected: removed markdown link formatting
                }
            };
        }

        public async Task<List<string>> GetSermonTagsAsync()
        {
            await Task.Delay(50);
            return new List<string>
            {
                "forgiveness", "grace", "healing", "trials", "perseverance", "hope",
                "discipleship", "mission", "obedience", "worship", "leadership", "family"
            };
        }
    }
}
```

<!-- Shared/MainLayout.razor -->
```razor
<!-- Shared/MainLayout.razor - The main layout for the application, including header, nav, and footer. -->
<div class="page">
    <header class="header">
        <div class="container navbar">
            <a class="logo" href="/">The Better Man Project</a>
            <div class="menu-toggle" @onclick="ToggleNavMenu">&#9776;</div>
            <NavMenu @ref="navMenuRef" />
        </div>
    </header>

    <main>
        <div class="content">
            @Body
        </div>
    </main>

    <footer class="footer">
        <div class="container">
            <p>&copy; @DateTime.Now.Year The Better Man Project. All rights reserved.</p>
            <div class="social-links">
                <!-- Placeholder for social media icons (e.g., Font Awesome) -->
                <a href="#" aria-label="Facebook"><i class="fab fa-facebook-f"></i></a>
                <a href="#" aria-label="Twitter"><i class="fab fa-twitter"></i></a>
                <a href="#" aria-label="Instagram"><i class="fab fa-instagram"></i></a>
            </div>
        </div>
    </footer>
</div>

@code {
    private NavMenu? navMenuRef;

    private void ToggleNavMenu()
    {
        navMenuRef?.Toggle();
    }
}
```

<!-- Shared/NavMenu.razor -->
```razor
<!-- Shared/NavMenu.razor - The navigation menu component. -->
<nav class="nav-links @(isOpen ? "open" : "")">
    <ul>
        <li><NavLink href="/" Match="NavLinkMatch.All">Home</NavLink></li>
        <li><NavLink href="devotionals">Devotionals</NavLink></li>
        <li><NavLink href="bible-study">Bible Study</NavLink></li>
        <li><NavLink href="sermons">Sermon Library</NavLink></li>
        <li><NavLink href="journal">Journal</NavLink></li>
        <li><NavLink href="apologetics">AI Apologetics Q&A</NavLink></li>
        <li><NavLink href="join">Join Us</NavLink></li>
    </ul>
</nav>

@code {
    private bool isOpen = false;

    public void Toggle()
    {
        isOpen = !isOpen;
    }
}
```

<!-- Pages/Apologetics.razor -->
```razor
<!-- Pages/Apologetics.razor - AI Apologetics Q&A Page -->
@page "/apologetics"
@inject ApologeticsService ApologeticsService
@inject IJSRuntime JSRuntime

<PageTitle>AI Apologetics Q&A</PageTitle>

<section class="section">
    <div class="container">
        <h2>AI Apologetics Q&A</h2>
        <p>Ask your toughest faith questions and get insightful, biblically-informed answers.</p>

        <div class="prompt-starters">
            @foreach (var q in initialQuestions)
            {
                <button @onclick="() => SetQuestionAndAsk(q.Question)">@q.Question</button>
            }
        </div>

        <div class="chat-interface">
            <div id="chat-messages">
                @foreach (var message in chatHistory)
                {
                    <div class="message @(message.Item1 == "user" ? "user-message" : "ai-message")">
                        @((MarkupString)message.Item2)
                    </div>
                }
                @if (isLoading)
                {
                    <div class="ai-message">
                        <div class="spinner-small"></div> Thinking...
                    </div>
                }
            </div>
            <div class="chat-input">
                <input type="text" @bind="currentQuestion" placeholder="Ask your faith question..." @onkeyup="HandleKeyUp" />
                <button @onclick="AskQuestion" disabled="@isLoading">Ask</button>
            </div>
        </div>
    </div>
</section>

@code {
    private string currentQuestion = "";
    private List<Tuple<string, string>> chatHistory = new(); // Item1: "user" or "ai", Item2: message content
    private bool isLoading = false;
    private List<ApologeticsQuestion> initialQuestions = new();

    protected override async Task OnInitializedAsync()
    {
        initialQuestions = ApologeticsService.GetInitialQuestions();
        // Inject the JavaScript function for Gemini API call
        await JSRuntime.InvokeVoidAsync("eval", @"
            window.askGeminiAI = async (prompt) => {
                let chatHistory = [];
                chatHistory.push({ role: 'user', parts: [{ text: prompt }] });
                const payload = { contents: chatHistory };
                const apiKey = ''; // Leave this empty; Canvas will provide it at runtime.
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

                try {
                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });
                    const result = await response.json();

                    if (result.candidates && result.candidates.length > 0 &&
                        result.candidates[0].content && result.candidates[0].content.parts &&
                        result.candidates[0].content.parts.length > 0) {
                        return result.candidates[0].content.parts[0].text;
                    } else {
                        console.error('Unexpected API response structure:', result);
                        return 'Sorry, I could not get an answer. Please try again.';
                    }
                } catch (error) {
                    console.error('Error calling Gemini API:', error);
                    return 'An error occurred while connecting to the AI. Please try again later.';
                }
            };
        ");
    }

    private async Task AskQuestion()
    {
        if (string.IsNullOrWhiteSpace(currentQuestion))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please enter a question.");
            return;
        }

        var userQuestion = currentQuestion;
        chatHistory.Add(Tuple.Create("user", userQuestion));
        currentQuestion = ""; // Clear input

        isLoading = true;
        StateHasChanged(); // Update UI to show loading

        try
        {
            var aiAnswer = await ApologeticsService.GetAIAnswer(userQuestion);
            chatHistory.Add(Tuple.Create("ai", aiAnswer));
        }
        catch (Exception ex)
        {
            chatHistory.Add(Tuple.Create("ai", $"Error: {ex.Message}. Could not get an answer."));
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Update UI to hide loading
            await ScrollToBottom(); // Scroll to the latest message
        }
    }

    private async Task SetQuestionAndAsk(string question)
    {
        currentQuestion = question;
        await AskQuestion();
    }

    private async Task HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AskQuestion();
        }
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('chat-messages').scrollTop = document.getElementById('chat-messages').scrollHeight;");
    }
}
```

<!-- Pages/BibleStudy.razor -->
```razor
<!-- Pages/BibleStudy.razor - Bible Study Themes Page -->
@page "/bible-study"
@inject BibleStudyService BibleStudyService

<PageTitle>Bible Study Themes</PageTitle>

<section class="section">
    <div class="container">
        <h2>Bible Study Themes</h2>
        <p>Explore in-depth studies on various topics to deepen your understanding of God's Word.</p>

        <div class="filter-bar">
            <input type="search" placeholder="Search studies..." @bind="searchTerm" @bind:event="oninput" />
            <select @bind="selectedCategory">
                <option value="">All Categories</option>
                @foreach (var category in categories)
                {
                    <option value="@category">@category</option>
                }
            </select>
        </div>

        <div class="content-grid">
            @if (filteredStudies == null)
            {
                <p>Loading Bible studies...</p>
            }
            else if (!filteredStudies.Any())
            {
                <p>No Bible studies found matching your criteria.</p>
            }
            else
            {
                @foreach (var study in filteredStudies)
                {
                    <div class="content-card">
                        <h3>@study.Title</h3>
                        <p>@study.Description</p>
                        <div class="meta">
                            <span>Category: @study.Category</span> |
                            <span>Duration: @study.Duration</span> |
                            <span>Lessons: @study.Lessons</span>
                        </div>
                        <a href="/bible-study/@study.Id" class="btn-read-more">Learn More</a>
                    </div>
                }
            }
        </div>
    </div>
</section>

@code {
    private List<BibleStudy>? allStudies;
    private List<BibleStudy>? filteredStudies;
    private string searchTerm = "";
    private string selectedCategory = "";
    private List<string> categories = new();

    protected override async Task OnInitializedAsync()
    {
        allStudies = await BibleStudyService.GetBibleStudiesAsync();
        categories = await BibleStudyService.GetBibleStudyCategoriesAsync();
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        if (allStudies == null) return;

        filteredStudies = allStudies
            .Where(s => string.IsNullOrWhiteSpace(searchTerm) ||
                        s.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                        s.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                        s.Category.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .Where(s => string.IsNullOrWhiteSpace(selectedCategory) || s.Category == selectedCategory)
            .ToList();
    }

    // Re-apply filters whenever search term or category changes
    private void OnSearchTermChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private void OnCategoryChanged(ChangeEventArgs e)
    {
        selectedCategory = e.Value?.ToString() ?? "";
        ApplyFilters();
    }
}
```

<!-- Pages/Devotionals.razor -->
```razor
<!-- Pages/Devotionals.razor - Daily Devotionals Page -->
@page "/devotionals"
@inject DevotionalService DevotionalService

<PageTitle>Daily Devotionals</PageTitle>

<section class="section">
    <div class="container">
        <h2>Daily Devotionals</h2>
        <p>Start your day with inspiring messages and reflections from God's Word.</p>

        <div class="filter-bar">
            <input type="search" placeholder="Search devotionals..." @bind="searchTerm" @bind:event="oninput" />
            <select @bind="selectedTheme">
                <option value="">All Themes</option>
                @foreach (var theme in themes)
                {
                    <option value="@theme">@theme</option>
                }
            </select>
        </div>

        <div class="content-grid">
            @if (filteredDevotionals == null)
            {
                <p>Loading devotionals...</p>
            }
            else if (!filteredDevotionals.Any())
            {
                <p>No devotionals found matching your criteria.</p>
            }
            else
            {
                @foreach (var devotional in filteredDevotionals)
                {
                    <div class="content-card">
                        <h3>@devotional.Title</h3>
                        <p>@devotional.Content.Substring(0, Math.Min(devotional.Content.Length, 150)).Trim()@((devotional.Content.Length > 150) ? "..." : "")</p>
                        <div class="meta">
                            <span>By @devotional.Author</span> |
                            <span>@devotional.Date.ToShortDateString()</span> |
                            <span>Theme: @devotional.Theme</span>
                        </div>
                        <a href="/devotionals/@devotional.Id" class="btn-read-more">Read More</a>
                    </div>
                }
            }
        </div>
    </div>
</section>

@code {
    private List<Devotional>? allDevotionals;
    private List<Devotional>? filteredDevotionals;
    private string searchTerm = "";
    private string selectedTheme = "";
    private List<string> themes = new();

    protected override async Task OnInitializedAsync()
    {
        allDevotionals = await DevotionalService.GetDevotionalsAsync();
        themes = await DevotionalService.GetDevotionalThemesAsync();
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        if (allDevotionals == null) return;

        filteredDevotionals = allDevotionals
            .Where(d => string.IsNullOrWhiteSpace(searchTerm) ||
                        d.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                        d.Content.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                        d.Author.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                        d.Scripture.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .Where(d => string.IsNullOrWhiteSpace(selectedTheme) || d.Theme == selectedTheme)
            .OrderByDescending(d => d.Date)
            .ToList();
    }

    // These handlers are implicitly called by @bind:event="oninput" and @bind
    private void OnSearchTermChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private void OnThemeChanged(ChangeEventArgs e)
    {
        selectedTheme = e.Value?.ToString() ?? "";
        ApplyFilters();
    }
}
```

<!-- Pages/Index.razor -->
```razor
<!-- Pages/Index.razor - Main Home Page -->
@page "/"

<PageTitle>The Better Man Project - Home</PageTitle>

<section class="hero">
    <div class="container">
        <h1>The Better Man Project</h1>
        <p>Empowering men to grow spiritually, build character, and live a life rooted in Christ.</p>
        <a href="join" class="btn-primary">Join the Journey</a>
    </div>
</section>

<section class="section">
    <div class="container">
        <h2>Our Core Pillars</h2>
        <p>We provide tools and resources designed to strengthen every aspect of your spiritual walk.</p>
        <div class="grid-container">
            <div class="card">
                <i class="icon fas fa-book-open"></i>
                <h3>Daily Devotionals</h3>
                <p>Start each day with a fresh word from God, designed to inspire and challenge you.</p>
            </div>
            <div class="card">
                <i class="icon fas fa-cross"></i>
                <h3>Bible Study Themes</h3>
                <p>Dive deeper into specific topics with structured studies that build biblical understanding.</p>
            </div>
            <div class="card">
                <i class="icon fas fa-microphone-alt"></i>
                <h3>Sermon Library</h3>
                <p>Access a curated collection of powerful sermons from leading voices in faith.</p>
            </div>
            <div class="card">
                <i class="icon fas fa-robot"></i>
                <h3>AI Apologetics Q&A</h3>
                <p>Get intelligent, biblically-informed answers to your toughest faith questions.</p>
            </div>
            <div class="card">
                <i class="icon fas fa-journal-whills"></i>
                <h3>Private Journal</h3>
                <p>Reflect on your spiritual journey, track prayers, and record gratitude in a secure space.</p>
            </div>
            <div class="card">
                <i class="icon fas fa-hand-holding-heart"></i>
                <h3>Community & Support</h3>
                <p>Connect with other men on the same journey, sharing insights and encouragement.</p>
            </div>
        </div>
    </div>
</section>

<section class="section">
    <div class="container">
        <h2>Why The Better Man Project?</h2>
        <p>In a world that constantly pulls us in different directions, we offer a dedicated space for spiritual growth.</p>
        <div class="grid-container">
            <div class="card">
                <h3>Integrated Tools</h3>
                <p>All your spiritual growth resources in one convenient platform.</p>
            </div>
            <div class="card">
                <h3>Actionable Insights</h3>
                <p>Content designed to move you from understanding to application.</p>
            </div>
            <div class="card">
                <h3>Biblical Foundation</h3>
                <p>Every resource is rooted in the timeless truths of God's Word.</p>
            </div>
        </div>
    </div>
</section>

<section class="section cta-section">
    <div class="container">
        <h2>Ready to Grow?</h2>
        <p>Join The Better Man Project today and take the next step in your spiritual journey.</p>
        <a href="join" class="btn-primary">Sign Up Now</a>
    </div>
</section>
```

<!-- Pages/Join.razor -->
```razor
<!-- Pages/Join.razor - Join/Signup Page -->
@page "/join"
@inject IJSRuntime JSRuntime

<PageTitle>Join The Better Man Project</PageTitle>

<section class="section">
    <div class="container">
        <h2>Join The Better Man Project</h2>
        <p>Sign up to receive daily devotionals, updates, and access to exclusive content.</p>

        <div class="form-container">
            <EditForm Model="@joinModel" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="name">Your Name:</label>
                    <InputText id="name" class="form-control" @bind-Value="joinModel.Name" placeholder="Enter your name" />
                    <ValidationMessage For="@(() => joinModel.Name)" />
                </div>

                <div class="form-group">
                    <label for="email">Your Email:</label>
                    <InputText id="email" class="form-control" @bind-Value="joinModel.Email" type="email" placeholder="Enter your email" />
                    <ValidationMessage For="@(() => joinModel.Email)" />
                </div>

                <button type="submit" class="btn-submit">Join Now</button>
            </EditForm>
        </div>
    </div>
</section>

@code {
    private JoinModel joinModel = new();

    private async Task HandleValidSubmit()
    {
        // In a real application, you would send this data to a backend service
        // for user registration, email list subscription, etc.
        // For this client-side demo, we'll just show a success message.

        await JSRuntime.InvokeVoidAsync("alert", $"Thank you for joining, {joinModel.Name}! We'll send updates to {joinModel.Email}.");

        // Optionally clear the form
        joinModel = new JoinModel();
    }

    // Simple model for the join form
    public class JoinModel
    {
        [Required(ErrorMessage = "Name is required.")]
        public string Name { get; set; } = "";

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        public string Email { get; set; } = "";
    }
}
```

<!-- Pages/Journal.razor -->
```razor
<!-- Pages/Journal.razor - Private Journal for Spiritual Reflection -->
@page "/journal"
@inject JournalService JournalService
@inject IJSRuntime JSRuntime

<PageTitle>Private Journal</PageTitle>

<section class="section">
    <div class="container">
        <h2>My Private Journal</h2>
        <p>Reflect on your spiritual journey, record insights, prayers, and moments of gratitude.</p>

        <div class="form-container">
            <EditForm Model="@newEntry" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="entryTitle">Title:</label>
                    <InputText id="entryTitle" class="form-control" @bind-Value="newEntry.Title" placeholder="Today's Reflection" />
                    <ValidationMessage For="@(() => newEntry.Title)" />
                </div>

                <div class="form-group">
                    <label for="journalEntry">Journal Entry:</label>
                    <InputTextArea id="journalEntry" class="form-control" @bind-Value="newEntry.Content" placeholder="What's on your heart today?" />
                    <ValidationMessage For="@(() => newEntry.Content)" />
                </div>

                <div class="form-group">
                    <label for="mood">Mood (Optional):</label>
                    <InputText id="mood" class="form-control" @bind-Value="newEntry.Mood" placeholder="e.g., Grateful, Peaceful, Challenged" />
                </div>

                <button type="submit" class="btn-submit">Save Entry</button>
            </EditForm>
        </div>

        <div class="journal-entry-list">
            <h3>Previous Entries</h3>
            @if (journalEntries == null)
            {
                <p>Loading journal entries...</p>
            }
            else if (!journalEntries.Any())
            {
                <p>No journal entries yet. Start by writing your first entry above!</p>
            }
            else
            {
                @foreach (var entry in journalEntries)
                {
                    <div class="journal-entry-card">
                        <h3>@entry.Title</h3>
                        <div class="date">@entry.CreatedAt.ToLocalTime().ToString("MMMM dd, yyyy hh:mm tt")</div>
                        <p>@entry.Content</p>
                        @if (!string.IsNullOrWhiteSpace(entry.Mood))
                        {
                            <p><strong>Mood:</strong> @entry.Mood</p>
                        }
                        <button class="btn-primary" @onclick="() => DeleteEntry(entry.Id)">Delete</button>
                    </div>
                }
            }
        </div>
    </div>
    </div>
</section>

@code {
    private JournalEntry newEntry = new();
    private List<JournalEntry>? journalEntries;

    protected override async Task OnInitializedAsync()
    {
        await LoadJournalEntries();
    }

    private async Task LoadJournalEntries()
    {
        journalEntries = await JournalService.GetJournalEntriesAsync();
    }

    private async Task HandleValidSubmit()
    {
        await JournalService.AddJournalEntryAsync(newEntry);
        await JSRuntime.InvokeVoidAsync("alert", "Journal entry saved!");
        newEntry = new JournalEntry(); // Clear form
        await LoadJournalEntries(); // Reload entries
    }

    private async Task DeleteEntry(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this journal entry?");
        if (confirmed)
        {
            await JournalService.DeleteJournalEntryAsync(id);
            await JSRuntime.InvokeVoidAsync("alert", "Journal entry deleted.");
            await LoadJournalEntries(); // Reload entries
        }
    }
}
```

<!-- Pages/Sermons.razor -->
```razor
<!-- Pages/Sermons.razor - Sermon Library Page -->
@page "/sermons"
@inject SermonService SermonService

<PageTitle>Sermon Library</PageTitle>

<section class="section">
    <div class="container">
        <h2>Sermon Library</h2>
        <p>Access a powerful collection of sermons from various pastors and teachers.</p>

        <div class="filter-bar">
            <input type="search" placeholder="Search sermons..." @bind="searchTerm" @bind:event="oninput" />
            <select @bind="selectedTag">
                <option value="">All Topics</option>
                @foreach (var tag in tags)
                {
                    <option value="@tag">@tag</option>
                }
            </select>
        </div>

        <div class="content-grid">
            @if (filteredSermons == null)
            {
                <p>Loading sermons...</p>
            }
            else if (!filteredSermons.Any())
            {
                <p>No sermons found matching your criteria.</p>
            }
            else
            {
                @foreach (var sermon in filteredSermons)
                {
                    <div class="content-card">
                        <h3>@sermon.Title</h3>
                        <p>@sermon.Description.Substring(0, Math.Min(sermon.Description.Length, 120)).Trim()@((sermon.Description.Length > 120) ? "..." : "")</p>
                        <div class="meta">
                            <span>Pastor: @sermon.Pastor</span> |
                            <span>Date: @sermon.Date.ToShortDateString()</span> |
                            <span>Duration: @sermon.Duration.ToString(@"hh\:mm")</span>
                        </div>
                        <a href="/sermons/@sermon.Id" class="btn-read-more">Listen/Watch</a>
                    </div>
                }
            }
        </div>
    </div>
</section>

@code {
    private List<Sermon>? allSermons;
    private List<Sermon>? filteredSermons;
    private string searchTerm = "";
    private string selectedTag = "";
    private List<string> tags = new();

    protected override async Task OnInitializedAsync()
    {
        allSermons = await SermonService.GetSermonsAsync();
        tags = await SermonService.GetSermonTagsAsync();
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        if (allSermons == null) return;

        filteredSermons = allSermons
            .Where(s => string.IsNullOrWhiteSpace(searchTerm) ||
                        s.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                        s.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                        s.Pastor.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                        s.Scripture.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                        s.Tags.Any(tag => tag.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
            .Where(s => string.IsNullOrWhiteSpace(selectedTag) || s.Tags.Contains(selectedTag, StringComparer.OrdinalIgnoreCase))
            .OrderByDescending(s => s.Date)
            .ToList();
    }

    // These handlers are implicitly called by @bind:event="oninput" and @bind
    private void OnSearchTermChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private void OnTagChanged(ChangeEventArgs e)
    {
        selectedTag = e.Value?.ToString() ?? "";
        ApplyFilters();
    }
}
